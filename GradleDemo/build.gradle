// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:4.0.1"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}


//println name
//println project.name
//
//ext {
//    author = "103style.top"
//    email = "wtimexiaoke@gmail.com"
//}
//
//task printProperties() {
//    println author
//    println email
//}

//// 使用 getter 方法
//println project.buildDir
//println getProject().getBuildDir()
//
//// 使用 setter 方法
//project.buildDir = 'target'
//getProject().setBuildDir('target')

//task taskName1 {
//    println 'taskName1'
//}
//task taskName2(dependsOn: 'taskName1'){
//    println 'taskName2'
//}
//task taskName3(dependsOn: ':app:lint'){
//    println 'taskName3'
//}
//taskName3.dependsOn taskName1


//tasks.addRule("Pattern: ping<ID>") { String taskName ->
//    if (taskName.startsWith("ping")) {
//        println "Pinging: " + (taskName - 'ping')
//        task(taskName) {
//            println "Pinging: " + (taskName - 'ping')
//        }
//    }
//}
//
//
//task groupPing {
//    dependsOn pingServer1, pingServer2
//}


//task list {
//    File srcDir
//
//    // 使用闭合创建一个文件集合
//    def collection = files { srcDir.listFiles() }
//
//    srcDir = file('app')
//    println "Contents of $srcDir.name"
//    collection.collect { it.name }.sort().each { println it }
//
//    srcDir = file('build')
//    println "Contents of $srcDir.name"
//    collection.collect { relativePath(it) }.sort().each { println it }
//}


////以一个基准目录创建一个文件树
//FileTree tree = fileTree(dir: 'app/src/main')
//
//// 添加包含和排除规则
//tree.include '**/*.java'
//tree.include '**/*.xml'
//tree.exclude '**/Abstract*'
//
//tree.each { File file ->
//    println file.name
//}
//
//// 过滤文件树
//FileTree filtered = tree.matching {
//    include '**/*.xml'
//}
//// 合并文件树A
//FileTree sum = tree + fileTree(dir: 'src/test')
//// 访问文件数的元素
////tree.visit { element -> println "$element.name => $element.size" }
//
//tree.visit {element-> println "$element.name size =  $element.size"}


//compile {
//    //使用一个 File 对象设置源目录
//    source = file('src/main/java')
//    //使用一个字符路径设置源目录
//    source = 'src/main/java'
//    // 使用一个集合设置多个源目录
//    source = ['src/main/java', '../shared/java']
//
//    // 使用 FileCollection 或者 FileTree 设置源目录
//    source = fileTree(dir: 'src/main/java').matching { include 'org/gradle/api/**' }
//
//    // 使用一个闭合设置源目录
//    source = {
//        // Use the contents of each zip file in the src dir
//        file('src').listFiles().findAll { it.name.endsWith('.zip') }.collect { zipTree(it) }
//    }
//
//    //指定文件
//    // 使用字符路径添加源目录
//    source 'src/main/java', 'src/main/groovy'
//    // 使用 File 对象添加源目录
//    source file('../shared/java')
//    // 使用闭合添加源目录
//    source { file('src/test/').listFiles() }
//}


//File file = new File('app/test.txt')
//file.createNewFile()

//task copyTask(type: Copy) {
//    exclude '**/build'
//    exclude '**/libs'
//    exclude '**/res'
//    from 'app'//源目录 或者 源文件
//    into 'test'//目标目录
//
////    // 使用一个闭合映射文件名
////    def i = 0;
////    rename { String fileName ->
////        fileName = i++ + fileName.substring(fileName.lastIndexOf('.'));
////    }
//    // 使用正则表达式映射文件名
//    rename '(.)(.+)\\.(.+)', '$1.$3'
//
//    //去除复制文件的空行
//    filter { String line ->
//        line.length() == 0 ? null : line
//    }
//}

task sync(type: Sync) {
    from 'gradle'
    into "test"
}